#pragma once

#include "drake/common/default_scalars.h"
#include "drake/common/drake_copyable.h"
#include "drake/common/eigen_types.h"
#include "drake/multibody/tree/multibody_tree_indexes.h"

namespace drake {
namespace multibody {

/**
 A class containing information regarding contact response between two bodies
 including:

    - The pair of bodies that are contacting, referenced by their BodyIndex.
    - A contact point on body A.
    - A contact point on body B.
    - The resulting force on body A.
    - The resulting force on body B.

 @tparam_default_scalar
 */
template <typename T>
class SpeculativeContactInfo {
 public:
  DRAKE_DEFAULT_COPY_AND_MOVE_AND_ASSIGN(SpeculativeContactInfo);
  /**
   Constructs the contact information for a given pair of two colliding bodies.
   @param bodyA_index
     Index that references body A.
   @param bodyB_index
     Index that references body B.
   @param p_WAp Position of the contact point P on A, in the world
   frame.
   @param p_WBq Position of the contact point Q on B, in the world
   frame.
   @param f_Ap_W Contact force on body A applied at the contact point P,
   expressed in the world frame W.
   @param f_Bq_W Contact force on body B applied at the contact point Q,
   expressed in the world frame W.

   @pre The two body indexes must reference bodies from the same MultibodyPlant.
   Contact values should likewise be generated by the same MultibodyPlant.
   */
  SpeculativeContactInfo(BodyIndex bodyA_index, BodyIndex bodyB_index,
                         const Vector3<T>& p_WAp, const Vector3<T>& p_WBq,
                         const Vector3<T>& f_Ap_W, const Vector3<T>& f_Bq_W);

  /// Returns the index of body A in the contact pair.
  BodyIndex bodyA_index() const { return bodyA_index_; }

  /// Returns the index of body B in the contact pair.
  BodyIndex bodyB_index() const { return bodyB_index_; }

  /// Returns the position `p_WAp` of the contact point P on the body A, in the
  /// world frame.
  const Vector3<T>& p_WAp() const { return p_WAp_; }

  /// Returns the position `p_WBq` of the contact point Q on the body B, in the
  /// world frame.
  const Vector3<T>& p_WBq() const { return p_WBq_; }

  /// Returns the contact force `f_Ap_W` on A at contact point P expressed in
  /// the world frame W.
  const Vector3<T>& f_Ap_W() const { return f_Ap_W_; }

  /// Returns the contact force `f_Bq_W` on B at contact point Q expressed in
  /// the world frame W.
  const Vector3<T>& f_Bq_W() const { return f_Bq_W_; }

 private:
  // Index of body A.
  BodyIndex bodyA_index_;
  // Index of body B.
  BodyIndex bodyB_index_;
  // Position of the contact point P on A, in the world frame.
  Vector3<T> p_WAp_;
  // Position of the contact point Q on B, in the world frame.
  Vector3<T> p_WBq_;
  // Contact force on body A applied at the contact point P, expressed in the
  // world frame W.
  Vector3<T> f_Ap_W_;
  // Contact force on body B applied at the contact point Q, expressed in the
  // world frame W.
  Vector3<T> f_Bq_W_;
};

}  // namespace multibody
}  // namespace drake

DRAKE_DECLARE_CLASS_TEMPLATE_INSTANTIATIONS_ON_DEFAULT_SCALARS(
    class ::drake::multibody::SpeculativeContactInfo);
